(import "persist")
(import "virtty")

(defclass <phone> (<dao-class>) ((name :accessor name :initarg name)
                                 (number :accessor number :initarg num)))
(defmethod initialize-object :after ((self <address>) initargs)
   (setq (name self) (elt (content self) 0))
   (setq (phone self) (elt (content self) 1))
   (setq (content self) nil))
(defmethod serialize ((obj <phone>) output-stream)
   (format output-stream "(~A ~A)" (name obj) (number obj)))
(defmethod key ((obj <phone>))
   (name obj))

(defun create()
   (let* ((f (create (class <form>) 't "Create" 'k '("Name" "Number")))
          (fields (vals f))
          (new-rec (create (class <phone>) 'c fields)))
         (insert-dao new-rec)))

(defun retrieve ()
   (let* ((key-f (create (class <form>) 't "Retrieve" 'k '("Name")))
          (key (vals key-f))
          (rec (get-dao (class <phone>) (car key)))
          (rec-f (create (class <form>) 't "Retrieve Result" 'k '("Name" "Number") 'v rec)))
        (form-retrieve rec-f)))

(defun update ()
   (let* ((key (create (class <form>) 't "Update" 'k '("Name")))
          (old-rec (get-dao (class <phone>) (car key)))
          (rec-f (create (class-form) 't "Update Result" 'k '("Name" "Number") 'v old-rec)))
         (form-update rec-f)
         (insert-dao rec-f)))

(defun delete ()
   (let ((key (create (class <form>) 't "Delete" 'k '("Name"))))
        (ndbm-delete (car key))))

(defun main ()
   (typrologue)
   (dynamic-let ((*db* (ndbm-open "phone" (ndbm-rdwr) #o644)))
            (let ((quitp nil))
                 (while (not quitp)
                        (case-using #'= (select "CRUD" '("Create" "Retrieve" "Update" "Delete" "Quit"))
                                    ((0) (create))
                                    ((1) (retrieve))
                                    ((2) (update))
                                    ((3) (delete))
                                    ((4) (setq quitp t)))))
            (ndbm-close *db*))
   (tyepilogue))

;; (defglobal *x* (create (class <address>) 'n "Bane" 'p "061-469399"))
;; (insert-dao *x*)
;; (defglobal *y* (get-dao (class <address>) "Bane"))
