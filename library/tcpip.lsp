(c-include "<sys/types.h>")
(c-include "<sys/socket.h>")
(c-include "<netinet/in.h>")
(c-include "<arpa/inet.h>")
(c-include "<netdb.h>")

(defclass socket ()
  ((ip :accessor socket-ip :initform nil) ;;ip address <string>
   (n  :accessor socket-n :initform 5000)  ;;number of port <integer>
   (d  :accessor socket-d :initform 0))) ;;discripter <integer>

(defun create-server (x)
  (c-lang "struct sockaddr_in addr;")
  (if (not (eq (class-of x)(class socket)))
      (error "server-create not socket" x))
  (let ((sock nil)
        (response nil)
        (ip (socket-ip x))
        (n (socket-n x))
        (d (socket-d x)))
    (setq sock (c-lang "socket(AF_INET, SOCK_STREAM, 0)"))    
    (if (< sock 0) (error "create-server" nil))
    (c-lang "addr.sin_family = AF_INET;")
    (c-lang "addr.sin_port = htons(INT_MASK & N);")
    (if (not (null ip))
        (c-lang "addr.sin_addr.s_addr = inet_addr(Fgetname(IP));")
        (c-lang "addr.sin_addr.s_addr = INADDR_ANY;"))
    (setq response (c-lang "bind((INT_MASK & SOCK), (struct sockaddr *)&addr, sizeof(addr));"))
    (if (< response 0) (error "server-create" nil))
    (setq response (c-lang "listen((INT_MASK & SOCK), 5);"))
    (if (< response 0) (error "server-create" nil))
    (setf (socket-d x)(c-lang "Fmakeint(INT_MASK & SOCK)"))
    t))

(defun server-accept (x)
  (c-lang "struct sockaddr_in client;")
  (c-lang "socklen_t len;")
  (if (not (eq (class-of x)(class socket)))
      (error "server-accept not socket" x))
  (let ((sock nil)
        (ip (socket-ip x))
        (n (socket-n x))
        (d (socket-d x))
        (y (create (class socket))))
    (c-lang "len = sizeof(client);")
    (setq sock (c-lang "accept((INT_MASK & D), (struct sockaddr *)&client, &len);"))
    (if (< sock 0) (error "server-accept" sock))
    (setf (socket-ip y)(c-lang "Fmakestr(inet_ntoa(client.sin_addr))"))
    (setf (socket-d y)(c-lang "Fmakeint(INT_MASK & SOCK)"))
    y))

(defun client-connect (x)
  (c-lang "struct sockaddr_in server;")
  (if (not (eq (class-of x) (class socket)))
      (error "client-connect not socket" x)) 
  (let ((sock nil)
        (response nil)
        (ip (socket-ip x))
        (n (socket-n x))
        (d (socket-n x)))
    (setq sock (c-lang "socket(AF_INET, SOCK_STREAM, 0)"))
    (c-lang "server.sin_family = AF_INET;")
    (c-lang "server.sin_port = htons(INT_MASK & N);")
    (c-lang "server.sin_addr.s_addr = inet_addr(Fgetname(IP));")
    (setq response 
          (c-lang "connect((INT_MASK & SOCK), (struct sockaddr *)&server, sizeof(server));"))
    (setf (socket-d x) (c-lang "Fmakeint(INT_MASK & SOCK)")))
  x)


(defun socket-send (x msg)
  (c-lang "int len;")
  (if (not (eq (class-of x)(class socket)))
      (error "socket-send not socket" x))
  (if (not (stringp msg))
      (error "socket-send not string" msg))
  (let ((response nil)
        (d (socket-d x)))
        (c-lang "len = strlen(Fgetname(MSG));")
        (setq response (c-lang "send((INT_MASK & D), Fgetname(MSG), len, 0);"))
        (if (< response 0)
            (error "socket-send" nil)))
  t)

(defun socket-recieve (x)
  (c-lang "char str[256];")
  (if (not (eq (class-of x)(class socket)))
      (error "socket-recieve not socket" x))
  (let ((d (socket-d x))
        (response nil))
        (c-lang "memset(str, 0, sizeof(str));")
        (setq response (c-lang "recv((INT_MASK & D), str, sizeof(str),0)"))
        (if (< response 0)
            (error "socket-resieve" nil))
        (c-lang "Fmakestr(str);" )))

(defun socket-close (x)
  (if (not (eq (class-of x)(class socket)))
      (error "socket-close not socket" x))
  (let ((d (socket-d x)))
    (c-lang "close(INT_MASK & D);")))  