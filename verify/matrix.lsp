(import "test")
(import "matrix")

(let ((test-vector #(1 2 3))
      (identity-matrix 
        #2a((1 0 0)
            (0 1 0)
            (0 0 1)))
      (zeros-matrix
        #2a((0 0 0)
            (0 0 0)
            (0 0 0)))
      (test-matrix 
        #2a((1 2 3)
            (4 5 6)
            (7 8 9))))
  ($ap 2 "matrixp")
  ($assert (matrixp test-matrix) t)
  ($ap 2 "rows")
  ($assert (class-of (matrix-convert identity-matrix <rows>)) 
           (class <rows>))
  ($assert (data (matrix-convert identity-matrix <rows>))
         #(#(1 0 0) #(0 1 0) #(0 0 1)))
  ($assert (data (matrix-convert test-matrix <rows>))
         #(#(1 2 3) #(4 5 6) #(7 8 9)))
  ($ap 2 "columns")
  ($assert (class-of (matrix-convert test-matrix <columns>))
           (class <columns>))
  ($assert (data (matrix-convert test-matrix <columns>))
         #(#(1 4 7) #(2 5 8) #(3 6 9)))
  ($ap 2 "rows->matrix")
  ($assert (matrix-convert (matrix-convert test-matrix <rows>) <general-array*>)
           test-matrix)
  ($ap 2 "transpose")
  ($ap 3 "transpose matrix")
  ($assert (matrix-transpose (matrix-transpose test-matrix)) test-matrix)
  ($ap 3 "transpose vector")
  ($assert (matrix-transpose (matrix-transpose test-vector)) test-vector)
  ($ap 2 "columns->matrix")
  ($assert (matrix-convert (matrix-convert test-matrix <columns>) <general-array*>) test-matrix)

  ($ap 2 "add")
  ($ap 3 "add scalar")
  ($assert (matrix-add 1 2) 3)
  ($ap 3 "add vector")
  ($assert (matrix-add #(1 2 3) #(4 5 6)) #(5 7 9))
  ($ap 3 "add matrix")
  ($assert (matrix-add identity-matrix identity-matrix) 
         #2a((2 0 0)
             (0 2 0)
             (0 0 2)))
  
  ($ap 2 "sub")
  ($ap 2 "sub scalar")
  ($assert (matrix-sub 2 1) 1)
  ($ap 2 "sub vector")
  ($assert (matrix-sub #(4 5 6) #(1 2 3)) #(3 3 3))
  ($ap 2 "sub matrix")
  ($assert (matrix-sub test-matrix identity-matrix)
         #2a((0 2 3)
             (4 4 6)
             (7 8 8)))
  ($assert (matrix-sub test-matrix test-matrix) zeros-matrix)

  ($ap 2 "dot")
  ($assert (vector-dot #(1 2 3) #(1 1 1)) 6)
  ($assert (vector-dot #(1 2 3) #(0 0 0)) 0)

  ($ap 2 "mult")
  ($ap 3 "mult scalar scalar")
  ($assert (matrix-mult 2 3) 6)
  ($ap 3 "mult vector scalar")
  ($assert (matrix-mult #(1 2 3) 2) #(2 4 6))
  ($ap 3 "mult vector matrix")
  ($assert (matrix-mult test-vector identity-matrix) test-vector)
  ($ap 3 "mult matrix matrix")
  ($assert (matrix-mult test-matrix identity-matrix) test-matrix)

  ($ap 2 "cross")
  ($assert (vector-cross #(1 2 3) #(4 5 6)) #(-3 6 -3))
  

  )
