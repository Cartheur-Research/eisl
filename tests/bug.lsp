(import "elixir")

(defpattern parse (((#\e #\n #\d) _res) _res))



(defpattern
 derive
 (((^ _x _n) _x) `(* ,_n (^ ,_x ,(- _n 1))))
 (((/ 1 _x) _x) `(/ -1 (^ ,_x 2)))
 (((sqrt _x) _x) `(/ 1 (* 2 sqrt (,_x))))
 (((sin _x) _x) `(cos ,_x))
 (((cos _x) _x) `(- (sin ,_x)))
 (((tan _x) _x) `(/ 1 (^ (cos ,_x) 2)))
 (((exp _x) _x) `(exp ,_x))
 (((^ _a _x) _x) `(* (^ ,_a ,_x) (log ,_a)))
 (((log _x) _x) `(/ 1 ,_x))
 (((log _a _x) `(/ 1 (* ,_x (log ,_a)))))
 (((+ (_f _x) (_g _x)) _x)
  (let ((d1 (derive `(,_f ,_x) `,_x))
        (d2 (derive `(,_g ,_x) `,_x)) )
     `(+ ,d1 ,d2)))
 (((* (_f _x) (_g _x)) _x)
  (let ((d1 (derive `(,_f ,_x) `,_x))
        (d2 (derive `(,_g ,_x) `,_x)) )
     `(+ (* ,d1 (,_g ,_x))
         (* (,_f ,_x) ,d2))))
 (((/ (_f _x) (_g _x)) _x)
  (let ((d1 (derive `(,_f ,_x) `,_x))
        (d2 (derive `(,_g ,_x) `,_x)) )
     `(/ (+ (* ,d1 (,_g ,_x))
            (* (,_f ,_x) ,d2 (^ (,_g ,_x) 2))))))
 (((* _k (_f _x)) _x) (let ((d (derive `(,_f ,_x) `,_x)))
                         `(* ,_k ,d))))
(defglobal a
           '(defpattern
             derive
             (((^ _x _n) _x) `(* ,_n (^ ,_x ,(- _n 1))))
             (((/ 1 _x) _x) `(/ -1 (^ ,_x 2)))
             (((sqrt _x) _x) `(/ 1 (* 2 sqrt (,_x))))
             (((sin _x) _x) `(cos ,_x))
             (((cos _x) _x) `(- (sin ,_x)))
             (((tan _x) _x) `(/ 1 (^ (cos ,_x) 2)))
             (((exp _x) _x) `(exp ,_x))
             (((^ _a _x) _x) `(* (^ ,_a ,_x) (log ,_a)))
             (((log _x) _x) `(/ 1 ,_x))
             (((log _a _x) `(/ 1 (* ,_x (log ,_a)))))
             (((+ (_f _x) (_g _x)) _x)
              (let ((d1 (derive `(,_f ,_x) `,_x))
                    (d2 (derive `(,_g ,_x) `,_x)) )
                 `(+ ,d1 ,d2)))
             (((* (_f _x) (_g _x)) _x)
              (let ((d1 (derive `(,_f ,_x) `,_x))
                    (d2 (derive `(,_g ,_x) `,_x)) )
                 `(+ (* ,d1 (,_g ,_x))
                     (* (,_f ,_x) ,d2))))
             (((/ (_f _x) (_g _x)) _x)
              (let ((d1 (derive `(,_f ,_x) `,_x))
                    (d2 (derive `(,_g ,_x) `,_x)) )
                 `(/ (+ (* ,d1 (,_g ,_x))
                        (* (,_f ,_x) ,d2 (^ (,_g ,_x) 2))))))
             (((* _k (_f _x)) _x) (let ((d (derive `(,_f ,_x) `,_x)))
                                     `(* ,_k ,d)))))

(DEFUN
 DERIVE
 (:REST #:G3)
 (LET
  ((_X NIL) (_N NIL) (_A NIL) (_F NIL) (_G NIL) (_K NIL))
  (COND
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE ^))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (SETQ* _N (CAR (CDR (CDR (CAR #:G3)))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (* (UNQUOTE _N) (^ (UNQUOTE _X) (UNQUOTE (- _N 1))))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE /))
     (NUMBERP (CAR (CDR (CAR #:G3))))
     (= (CAR (CDR (CAR #:G3))) 1)
     (SETQ* _X (CAR (CDR (CDR (CAR #:G3)))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (/ -1 (^ (UNQUOTE _X) 2))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE SQRT))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (/ 1 (* 2 SQRT ((UNQUOTE _X))))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE SIN))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (COS (UNQUOTE _X))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE COS))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (- (SIN (UNQUOTE _X)))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE TAN))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (/ 1 (^ (COS (UNQUOTE _X)) 2))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE EXP))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (EXP (UNQUOTE _X))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE ^))
     (SETQ* _A (CAR (CDR (CAR #:G3))))
     (SETQ* _X (CAR (CDR (CDR (CAR #:G3)))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (* (^ (UNQUOTE _A) (UNQUOTE _X))
                    (LOG (UNQUOTE _A)))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE LOG))
     (SETQ* _X (CAR (CDR (CAR #:G3))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (QUASI-QUOTE (/ 1 (UNQUOTE _X))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE LOG))
     (SETQ* _A (CAR (CDR (CAR #:G3))))
     (SETQ* _X (CAR (CDR (CDR (CAR #:G3)))))
     (CONSP (CAR (CDR #:G3)))
     (EQ (CAR (CAR (CDR #:G3)))
         (QUOTE QUASI-QUOTE))
     (CONSP (CAR (CDR (CAR (CDR #:G3)))))
     (EQ (CAR (CAR (CDR (CAR (CDR #:G3))))) (QUOTE /))
     (NUMBERP (CAR (CDR (CAR (CDR (CAR (CDR #:G3)))))))
     (= (CAR (CDR (CAR (CDR (CAR (CDR #:G3)))))) 1)
     (CONSP (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3))))))))
     (EQ (CAR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3)))))))) (QUOTE *))
     (CONSP (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3))))))))))
     (EQ (CAR (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3)))))))))) (QUOTE UNQUOTE))
     (EQUAL (CAR (CDR (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3))))))))))) _X)
     (CONSP (CAR (CDR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3)))))))))))
     (EQ (CAR (CAR (CDR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3))))))))))) (QUOTE LOG))
     (CONSP (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3)))))))))))))
     (EQ
      (CAR (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3)))))))))))))
      (QUOTE UNQUOTE))
     (EQUAL
      (CAR (CDR (CAR (CDR (CAR (CDR (CDR (CAR (CDR (CDR (CAR (CDR (CAR (CDR #:G3))))))))))))))
      _A)))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE +))
     (CONSP (CAR (CDR (CAR #:G3))))
     (SETQ* _F (CAR (CAR (CDR (CAR #:G3)))))
     (SETQ* _X (CAR (CDR (CAR (CDR (CAR #:G3))))))
     (CONSP (CAR (CDR (CDR (CAR #:G3)))))
     (SETQ* _G (CAR (CAR (CDR (CDR (CAR #:G3))))))
     (EQUAL (CAR (CDR (CAR (CDR (CDR (CAR #:G3)))))) _X)
     (EQUAL (CAR (CDR #:G3)) _X))
    (LET
     ((D1 (DERIVE (QUASI-QUOTE ((UNQUOTE _F) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X))))
      (D2 (DERIVE (QUASI-QUOTE ((UNQUOTE _G) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X)))))
     (QUASI-QUOTE (+ (UNQUOTE D1) (UNQUOTE D2)))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE *))
     (CONSP (CAR (CDR (CAR #:G3))))
     (SETQ* _F (CAR (CAR (CDR (CAR #:G3)))))
     (SETQ* _X (CAR (CDR (CAR (CDR (CAR #:G3))))))
     (CONSP (CAR (CDR (CDR (CAR #:G3)))))
     (SETQ* _G (CAR (CAR (CDR (CDR (CAR #:G3))))))
     (EQUAL (CAR (CDR (CAR (CDR (CDR (CAR #:G3)))))) _X)
     (EQUAL (CAR (CDR #:G3)) _X))
    (LET
     ((D1 (DERIVE (QUASI-QUOTE ((UNQUOTE _F) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X))))
      (D2 (DERIVE (QUASI-QUOTE ((UNQUOTE _G) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X)))))
     (QUASI-QUOTE
      (+ (* (UNQUOTE D1) ((UNQUOTE _G) (UNQUOTE _X)))
         (* ((UNQUOTE _F) (UNQUOTE _X)) (UNQUOTE D2))))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE /))
     (CONSP (CAR (CDR (CAR #:G3))))
     (SETQ* _F (CAR (CAR (CDR (CAR #:G3)))))
     (SETQ* _X (CAR (CDR (CAR (CDR (CAR #:G3))))))
     (CONSP (CAR (CDR (CDR (CAR #:G3)))))
     (SETQ* _G (CAR (CAR (CDR (CDR (CAR #:G3))))))
     (EQUAL (CAR (CDR (CAR (CDR (CDR (CAR #:G3)))))) _X)
     (EQUAL (CAR (CDR #:G3)) _X))
    (LET
     ((D1 (DERIVE (QUASI-QUOTE ((UNQUOTE _F) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X))))
      (D2 (DERIVE (QUASI-QUOTE ((UNQUOTE _G) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X)))))
     (QUASI-QUOTE
      (/
       (+ (* (UNQUOTE D1) ((UNQUOTE _G) (UNQUOTE _X)))
          (* ((UNQUOTE _F) (UNQUOTE _X)) (UNQUOTE D2) (^ ((UNQUOTE _G) (UNQUOTE _X)) 2)))))))
   ((AND
     (CONSP #:G3)
     (CONSP (CAR #:G3))
     (EQ (CAR (CAR #:G3)) (QUOTE *))
     (SETQ* _K (CAR (CDR (CAR #:G3))))
     (CONSP (CAR (CDR (CDR (CAR #:G3)))))
     (SETQ* _F (CAR (CAR (CDR (CDR (CAR #:G3))))))
     (SETQ* _X (CAR (CDR (CAR (CDR (CDR (CAR #:G3)))))))
     (EQUAL (CAR (CDR #:G3)) _X))
    (LET
     ((D (DERIVE (QUASI-QUOTE ((UNQUOTE _F) (UNQUOTE _X))) (QUASI-QUOTE (UNQUOTE _X)))))
     (QUASI-QUOTE (* (UNQUOTE _K) (UNQUOTE D))))))))
