
;;; written by M.hiroi
;
;; 二次元配列版
(defun pascal (n)
    (let ((table (create-array (list n n) 1)))
       (for ((i 2 (+ i 1)))
            ((>= i n))
            (for ((j 1 (+ j 1)))
                 ((>= j i))
                 (setf (aref table i j) (+ (aref table (- i 1) (- j 1))
                                           (aref table (- i 1) j)))))
       (for ((i 0 (+ i 1)))
            ((>= i n))
            (for ((j 0 (+ j 1)))
                 ((> j i))
                 (format (standard-output) "~D " (aref table i j)))
            (format (standard-output) "~%"))))

;; ベクタ版
(defun pascal1 (n)
    (let ((table (create-vector n 1)))
       (format (standard-output) "1~%")
       (format (standard-output) "1 1~%")
       (for ((i 2 (+ i 1)))
            ((>= i n))
            (for ((j (- i 1) (- j 1)))
                 ((= j 0))
                 (setf (aref table j) (+ (aref table j) (aref table (- j 1)))))
            (for ((j 0 (+ j 1)))
                 ((> j i)
                  (format (standard-output) "~%") )
                 (format (standard-output) "~D " (aref table j))))))

(defun sieve (n)
    (let ((ps (create-vector (div n 2) t))
          (x 3) )
       (format (standard-output) "2 ")
       (while (< (* x x) n)
          (let ((i (div (- x 3) 2)))
             (cond ((aref ps i)
                      (format (standard-output) "~D " x)
                      (for ((i i (+ i x)))
                         ((>= i (length ps)))
                         (setf (aref ps i) nil))))
             (setq x (+ x 2))))
       (while (<= x n)
          (let ((i (div (- x 3) 2)))
             (if (aref ps i)
                 (format (standard-output) "~D " x)))
          (setq x (+ x 2)))))
