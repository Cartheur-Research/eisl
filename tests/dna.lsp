#|
 DNA
|#

(import "elixir")

(defpattern decode 
    (((#\u #\u #\u :rest _x) _sw) (cons 'phe (decode _x _sw)))
    (((#\u #\u #\c :rest _x) _sw) (cons 'ala (decode _x _sw)))
    (((#\u #\u #\a :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\u #\u #\g :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\c #\u #\u :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\c #\u #\c :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\c #\u #\a :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\c #\u #\g :rest _x) _sw) (cons 'leu (decode _x _sw)))
    (((#\a #\u #\u :rest _x) _sw) (cons 'ile (decode _x _sw)))
    (((#\a #\u #\c :rest _x) _sw) (cons 'ile (decode _x _sw)))
    (((#\a #\u #\a :rest _x) _sw) (cons 'ile (decode _x _sw)))
    (((#\a #\u #\g :rest _x) nil) (cons 'met (decode _x t)))
    (((#\a #\u #\g :rest _x) _sw) (cons 'begin (decode _x _sw)))
    (((#\g #\u #\u :rest _x) _sw) (cons 'val (decode _x _sw)))
    (((#\g #\u #\c :rest _x) _sw) (cons 'val (decode _x _sw)))
    (((#\g #\u #\a :rest _x) _sw) (cons 'val (decode _x _sw)))
    (((#\g #\u #\g :rest _x) _sw) (cons 'val (decode _x _sw)))
    (((#\u #\c #\u :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\u #\c #\c :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\u #\c #\a :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\u #\c #\g :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\c #\c #\u :rest _x) _sw) (cons 'pro (decode _x _sw)))
    (((#\c #\c #\c :rest _x) _sw) (cons 'pro (decode _x _sw)))
    (((#\c #\c #\a :rest _x) _sw) (cons 'pro (decode _x _sw)))
    (((#\c #\c #\g :rest _x) _sw) (cons 'pro (decode _x _sw)))
    (((#\a #\c #\u :rest _x) _sw) (cons 'thr (decode _x _sw)))
    (((#\a #\c #\c :rest _x) _sw) (cons 'thr (decode _x _sw)))
    (((#\a #\c #\a :rest _x) _sw) (cons 'thr (decode _x _sw)))
    (((#\a #\c #\g :rest _x) _sw) (cons 'thr (decode _x _sw)))
    (((#\g #\c #\u :rest _x) _sw) (cons 'ala (decode _x _sw)))
    (((#\g #\c #\c :rest _x) _sw) (cons 'ala (decode _x _sw)))
    (((#\g #\c #\a :rest _x) _sw) (cons 'ala (decode _x _sw)))
    (((#\g #\c #\g :rest _x) _sw) (cons 'ala (decode _x _sw)))
    (((#\u #\a #\u :rest _x) _sw) (cons 'tyr (decode _x _sw)))
    (((#\u #\a #\c :rest _x) _sw) (cons 'thr (decode _x _sw)))
    (((#\u #\a #\a :rest _x) _sw) (cons 'end (decode _x _sw)))
    (((#\u #\a #\g :rest _x) _sw) (cons 'end (decode _x _sw)))
    (((#\c #\a #\u :rest _x) _sw) (cons 'his (decode _x _sw)))
    (((#\c #\a #\c :rest _x) _sw) (cons 'his (decode _x _sw)))
    (((#\c #\a #\a :rest _x) _sw) (cons 'gln (decode _x _sw)))
    (((#\c #\a #\g :rest _x) _sw) (cons 'gln (decode _x _sw)))
    (((#\a #\a #\u :rest _x) _sw) (cons 'asn (decode _x _sw)))
    (((#\a #\a #\c :rest _x) _sw) (cons 'asn (decode _x _sw)))
    (((#\a #\a #\a :rest _x) _sw) (cons 'lys (decode _x _sw)))
    (((#\a #\a #\g :rest _x) _sw) (cons 'lys (decode _x _sw)))
    (((#\g #\a #\u :rest _x) _sw) (cons 'asp (decode _x _sw)))
    (((#\g #\a #\c :rest _x) _sw) (cons 'asp (decode _x _sw)))
    (((#\g #\a #\a :rest _x) _sw) (cons 'glu (decode _x _sw)))
    (((#\g #\a #\g :rest _x) _sw) (cons 'glu (decode _x _sw)))
    (((#\u #\g #\u :rest _x) _sw) (cons 'cys (decode _x _sw)))
    (((#\u #\g #\c :rest _x) _sw) (cons 'cys (decode _x _sw)))
    (((#\u #\g #\a :rest _x) _sw) (cons 'end (decode _x _sw)))
    (((#\u #\g #\g :rest _x) _sw) (cons 'trp (decode _x _sw)))
    (((#\c #\g #\u :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\c #\g #\c :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\c #\g #\a :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\c #\g #\g :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\a #\g #\u :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\a #\g #\c :rest _x) _sw) (cons 'ser (decode _x _sw)))
    (((#\a #\g #\a :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\a #\g #\g :rest _x) _sw) (cons 'arg (decode _x _sw)))
    (((#\g #\g #\u :rest _x) _sw) (cons 'gly (decode _x _sw)))
    (((#\g #\g #\c :rest _x) _sw) (cons 'gly (decode _x _sw)))
    (((#\g #\g #\a :rest _x) _sw) (cons 'gly (decode _x _sw)))
    (((#\g #\g #\g :rest _x) _sw) (cons 'gly (decode _x _sw))))

(defpattern copy
    (((#\a :rest _x)) (cons #\u (copy _x)))
    (((#\t :rest _x)) (cons #\a (copy _x)))
    (((#\g :rest _x)) (cons #\c (copy _x)))
    (((#\c :rest _x)) (cons #\g (copy _x))))

